diff --git a/CHANGELOG.md b/CHANGELOG.md
index 817fc2b..08ddb70 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -94,7 +94,7 @@
 
 - Add auto embed fastlane
 - Updated Android Building environment
-- Add testID prop to AnimatedLottieView typescript definition
+- Add testID prop to LottieView typescript definition
 - Added Pause & Resume commands. Also added `onLayout` prop.
 - Fix iOS speed not changing dynamically
 - Improved documentation
diff --git a/apps/paper/index.js b/apps/paper/index.js
index 33b8761..cfcf181 100644
--- a/apps/paper/index.js
+++ b/apps/paper/index.js
@@ -1,4 +1,8 @@
-import { AppRegistry } from 'react-native';
+import {AppRegistry} from 'react-native';
 import LottieAnimatedExample from './src/LottieAnimatedExample';
+import {DotLottieExample} from './src/DotLottieExample';
+import {MemoryTest} from './src/MemoryTest';
 
-AppRegistry.registerComponent('example', () => LottieAnimatedExample);
+// AppRegistry.registerComponent('example', () => LottieAnimatedExample);
+// AppRegistry.registerComponent('example', () => MemoryTest);
+AppRegistry.registerComponent('example', () => DotLottieExample);
diff --git a/apps/paper/metro.config.js b/apps/paper/metro.config.js
index f0ecc0d..2da7a8d 100644
--- a/apps/paper/metro.config.js
+++ b/apps/paper/metro.config.js
@@ -9,6 +9,8 @@ const root = path.resolve(__dirname, '../../packages/core/');
 
 const modules = Object.keys(pack.peerDependencies);
 
+const defaultConfig = getDefaultConfig(__dirname);
+
 /**
  * Metro configuration
  * https://facebook.github.io/metro/docs/configuration
@@ -22,6 +24,7 @@ const config = {
   // We need to make sure that only one version is loaded for peerDependencies
   // So we exclude them at the root, and alias them to the versions in example's node_modules
   resolver: {
+    assetExts: [...defaultConfig.resolver.assetExts, 'lottie'],
     blacklistRE: exclusionList(
       modules.map(
         m => new RegExp(`^${escape(path.join(root, 'node_modules', m))}\\/.*$`),
@@ -35,4 +38,4 @@ const config = {
   },
 };
 
-module.exports = mergeConfig(getDefaultConfig(__dirname), config);
+module.exports = mergeConfig(defaultConfig, config);
diff --git a/apps/paper/src/LottieAnimatedExample.tsx b/apps/paper/src/LottieAnimatedExample.tsx
index 80640fc..7cd45bd 100644
--- a/apps/paper/src/LottieAnimatedExample.tsx
+++ b/apps/paper/src/LottieAnimatedExample.tsx
@@ -1,6 +1,5 @@
 import Slider from '@react-native-community/slider';
 import LottieView from 'lottie-react-native';
-import {AnimatedLottieViewProps} from 'lottie-react-native/lib/typescript/LottieView.types';
 import React, {useEffect, useRef, useState} from 'react';
 import {
   Animated,
@@ -21,6 +20,7 @@ import {
   playIcon,
   styles,
 } from './constants';
+import {LottieViewProps} from 'lottie-react-native/lib/typescript/LottieView.types';
 
 const AnimatedLottieView = Animated.createAnimatedComponent(LottieView);
 
@@ -31,7 +31,7 @@ const LottieAnimatedExample = () => {
   const [isInverse, setIsInverse] = useState(false);
   const [loop, setLoop] = useState(true);
   const [renderMode, setRenderMode] =
-    useState<AnimatedLottieViewProps['renderMode']>('AUTOMATIC');
+    useState<LottieViewProps['renderMode']>('AUTOMATIC');
   const [isImperative, setImperative] = useState(false);
   const anim = useRef<LottieView>(null);
 
@@ -100,7 +100,7 @@ const LottieAnimatedExample = () => {
           onAnimationFinish={onAnimationFinish}
           enableMergePathsAndroidForKitKatAndAbove
           renderMode={renderMode}
-          resizeMode={'cover'}
+          resizeMode={'contain'}
         />
       </View>
       <View style={{paddingBottom: 20, paddingHorizontal: 10}}>
diff --git a/packages/core/ios/LottieReactNative/ContainerView.swift b/packages/core/ios/LottieReactNative/ContainerView.swift
index 878363d..8a455ce 100644
--- a/packages/core/ios/LottieReactNative/ContainerView.swift
+++ b/packages/core/ios/LottieReactNative/ContainerView.swift
@@ -74,9 +74,7 @@ class ContainerView: RCTView {
     
     @objc func setAutoPlay(_ autoPlay: Bool) {
         self.autoPlay = autoPlay
-        if(autoPlay && animationView?.isAnimationPlaying == false) {
-            self.play()
-        }
+        playIfNeeded()
     }
     
     @objc func setTextFiltersIOS(_ newTextFilters: [NSDictionary]) {
@@ -97,7 +95,7 @@ class ContainerView: RCTView {
         }
     }
 
-    func getLottieConfiguration() -> LottieConfiguration {
+    var lottieConfiguration: LottieConfiguration {
         return LottieConfiguration(
             renderingEngine: renderMode
         )
@@ -126,12 +124,33 @@ class ContainerView: RCTView {
         if (animationView != nil) {
             let nextAnimationView = LottieAnimationView(
                 animation: animationView?.animation,
-                configuration: getLottieConfiguration()
+                configuration: lottieConfiguration
             )
             replaceAnimationView(next: nextAnimationView)
         }
     }
 
+    @objc func setSourceDotLottie(_ source: NSDictionary) {
+        guard let uri = source["uri"] as? String else {
+            return
+        }
+        
+        print("The URI " + uri)
+        
+        guard let url = URL(string: uri) else {
+            return
+        }
+        
+        _ = LottieAnimationView(
+            dotLottieUrl: url,
+            configuration: lottieConfiguration,
+            completion: { [weak self] view, error in
+                print("Completion")
+                self?.replaceAnimationView(next: view)
+            }
+        )
+    }
+    
     @objc func setSourceURL(_ newSourceURLString: String) {
         var url = URL(string: newSourceURLString)
         
@@ -139,36 +158,14 @@ class ContainerView: RCTView {
             // interpret raw URL paths as relative to the resource bundle
             url = URL(fileURLWithPath: newSourceURLString, relativeTo: Bundle.main.resourceURL)
         }
+        
         guard let url else {
             return
         }
         
-        DispatchQueue.global(qos: .default).async {
-            do {
-                let sourceJson = try String(contentsOf: url)
-                guard let data = sourceJson.data(using: String.Encoding.utf8),
-                let animation = try? JSONDecoder().decode(LottieAnimation.self, from: data) else {
-                    if (RCT_DEBUG == 1) {
-                        print("Unable to decode the lottie animation object from the fetched URL source")
-                    }
-                    return
-                }
-                DispatchQueue.main.async { [weak self] in
-                    guard let self else { return }
-                    let nextAnimationView = LottieAnimationView(
-                        animation: animation,
-                        configuration: self.getLottieConfiguration()
-                    )
-                    self.replaceAnimationView(next: nextAnimationView)
-                }
-            } catch {
-                if (RCT_DEBUG == 1) {
-                    print("Unable to load the lottie animation URL")
-                }
-            }
-        }
+        self.fetchLottieAnimation(from: url)
     }
-
+    
     @objc func setSourceJson(_ newSourceJson: String) {
         sourceJson = newSourceJson
 
@@ -182,7 +179,7 @@ class ContainerView: RCTView {
 
         let nextAnimationView = LottieAnimationView(
             animation: animation,
-            configuration: getLottieConfiguration()
+            configuration: lottieConfiguration
         )
         replaceAnimationView(next: nextAnimationView)
     }
@@ -195,7 +192,7 @@ class ContainerView: RCTView {
 
         let nextAnimationView = LottieAnimationView(
             name: sourceName,
-            configuration: getLottieConfiguration()
+            configuration: lottieConfiguration
         )
         replaceAnimationView(next: nextAnimationView)
     }
@@ -248,29 +245,32 @@ class ContainerView: RCTView {
     // The animation view is a child of the RCTView, so if the bounds ever change, add those changes to the animation view as well
     override var bounds: CGRect {
         didSet {
-            animationView?.reactSetFrame(self.bounds)
+            animationView?.frame = self.bounds
         }
     }
-    
-    // MARK: Private
-    func replaceAnimationView(next: LottieAnimationView) {
-        animationView?.removeFromSuperview()
 
+    // MARK: Private
+    func  replaceAnimationView(next: LottieAnimationView) {
+        super.removeReactSubview(animationView)
+        
         let contentMode = animationView?.contentMode ?? .scaleAspectFit
+        
         animationView = next
-        addSubview(next)
+        
         animationView?.contentMode = contentMode
-        animationView?.reactSetFrame(self.bounds)
         animationView?.backgroundBehavior = .pauseAndRestore
         animationView?.animationSpeed = speed
         animationView?.loopMode = loop
-        applyColorProperties()
+        animationView?.frame = self.bounds
         
-        if (self.autoPlay && animationView?.isAnimationPlaying == false) {
-            self.play()
-        }
+        addSubview(next)
+
+        applyColorProperties()
+        playIfNeeded()
     }
     
+
+    
     func applyColorProperties() {
         guard let animationView = animationView else { return }
 
@@ -283,4 +283,48 @@ class ContainerView: RCTView {
             }
         }
     }
+    
+    func playIfNeeded() {
+        if(autoPlay && animationView?.isAnimationPlaying == false) {
+            self.play()
+        }
+    }
+    
+    func fetchLottieAnimation(from url: URL) {
+        URLSession.shared.dataTask(with: url) { [weak self] data, response, error in
+            guard let self = self else { return }
+
+            if let error = error {
+                if RCT_DEBUG == 1 {
+                    print("Unable to fetch the Lottie animation from the URL: \(error)")
+                }
+                return
+            }
+
+            guard let data = data else {
+                if RCT_DEBUG == 1 {
+                    print("No data received for the Lottie animation from the URL.")
+                }
+                return
+            }
+
+            do {
+                let animation = try JSONDecoder().decode(LottieAnimation.self, from: data)
+
+                DispatchQueue.main.async { [weak self] in
+                    guard let self = self else { return }
+
+                    let nextAnimationView = LottieAnimationView(
+                        animation: animation,
+                        configuration: self.lottieConfiguration
+                    )
+                    self.replaceAnimationView(next: nextAnimationView)
+                }
+            } catch {
+                if RCT_DEBUG == 1 {
+                    print("Unable to decode the Lottie animation object from the fetched URL source: \(error)")
+                }
+            }
+        }.resume()
+    }
 }
diff --git a/packages/core/ios/LottieReactNative/LRNAnimationViewManagerObjC.m b/packages/core/ios/LottieReactNative/LRNAnimationViewManagerObjC.m
index e6c36ad..28d02cb 100644
--- a/packages/core/ios/LottieReactNative/LRNAnimationViewManagerObjC.m
+++ b/packages/core/ios/LottieReactNative/LRNAnimationViewManagerObjC.m
@@ -7,6 +7,7 @@ RCT_EXPORT_VIEW_PROPERTY(resizeMode, NSString);
 RCT_EXPORT_VIEW_PROPERTY(sourceJson, NSString);
 RCT_EXPORT_VIEW_PROPERTY(sourceName, NSString);
 RCT_EXPORT_VIEW_PROPERTY(sourceURL, NSString);
+RCT_EXPORT_VIEW_PROPERTY(sourceDotLottie, NSDictionary);
 RCT_EXPORT_VIEW_PROPERTY(progress, CGFloat);
 RCT_EXPORT_VIEW_PROPERTY(loop, BOOL);
 RCT_EXPORT_VIEW_PROPERTY(autoPlay, BOOL);
diff --git a/packages/core/src/LottieView.tsx b/packages/core/src/LottieView.tsx
index b1daa7e..1db155e 100644
--- a/packages/core/src/LottieView.tsx
+++ b/packages/core/src/LottieView.tsx
@@ -1,16 +1,22 @@
 import React from 'react';
-import { NativeSyntheticEvent, ViewProps, processColor } from 'react-native';
+import {
+  Image,
+  NativeSyntheticEvent,
+  ViewProps,
+  processColor,
+} from 'react-native';
 
-import type { AnimatedLottieViewProps } from './LottieView.types';
+import type { LottieViewProps } from './LottieView.types';
 
 import NativeLottieAnimationView, {
   Commands,
 } from './specs/LottieAnimationViewNativeComponent';
 
-type Props = AnimatedLottieViewProps & { containerProps?: ViewProps };
+type Props = LottieViewProps & { containerProps?: ViewProps };
 
 const defaultProps: Props = {
   source: undefined,
+  sourceDotLottie: undefined,
   progress: 0,
   speed: 1,
   loop: true,
@@ -25,10 +31,7 @@ const defaultProps: Props = {
   textFiltersIOS: [],
 };
 
-/**
- * View hosting the lottie animation.
- */
-export class AnimatedLottieView extends React.PureComponent<Props, {}> {
+export class LottieView extends React.PureComponent<Props, {}> {
   static defaultProps = defaultProps;
 
   _lottieAnimationViewRef:
@@ -92,6 +95,7 @@ export class AnimatedLottieView extends React.PureComponent<Props, {}> {
       textFiltersAndroid,
       textFiltersIOS,
       resizeMode,
+      sourceDotLottie,
       ...rest
     } = this.props;
 
@@ -117,6 +121,8 @@ export class AnimatedLottieView extends React.PureComponent<Props, {}> {
       color: processColor(colorFilter.color),
     }));
 
+    const resolvedDotLottie = Image.resolveAssetSource(sourceDotLottie);
+
     return (
       <NativeLottieAnimationView
         ref={this._captureRef}
@@ -129,6 +135,7 @@ export class AnimatedLottieView extends React.PureComponent<Props, {}> {
         sourceName={sourceName}
         sourceJson={sourceJson}
         sourceURL={sourceURL}
+        sourceDotLottie={resolvedDotLottie}
         onAnimationFinish={this.onAnimationFinish}
         autoPlay={autoPlay}
         resizeMode={resizeMode}
diff --git a/packages/core/src/LottieView.types.ts b/packages/core/src/LottieView.types.ts
index 60f9710..0e73fe5 100644
--- a/packages/core/src/LottieView.types.ts
+++ b/packages/core/src/LottieView.types.ts
@@ -2,6 +2,7 @@ import type {
   StyleProp,
   ViewStyle,
   LayoutChangeEvent,
+  ImageRequireSource,
 } from 'react-native';
 
 /**
@@ -37,9 +38,9 @@ type TextFilterAndroid = {
 };
 
 /**
- * Properties of the AnimatedLottieView component
+ * Properties of the LottieView component
  */
-export interface AnimatedLottieViewProps {
+export interface LottieViewProps {
   /**
    * The source of animation. Can be referenced as a local asset by a string, or remotely
    * with an object with a `uri` property, or it can be an actual JS object of an
@@ -48,6 +49,8 @@ export interface AnimatedLottieViewProps {
    */
   source: string | AnimationObject | { uri: string };
 
+  sourceDotLottie?: ImageRequireSource;
+
   /**
    * A number between 0 and 1, or an `Animated` number between 0 and 1. This number
    * represents the normalized progress of the animation. If you update this prop, the
diff --git a/packages/core/src/index.tsx b/packages/core/src/index.tsx
index 616f33d..15eb4e3 100644
--- a/packages/core/src/index.tsx
+++ b/packages/core/src/index.tsx
@@ -1,2 +1,2 @@
-import { AnimatedLottieView } from './LottieView';
-export default AnimatedLottieView;
+import { LottieView } from './LottieView';
+export default LottieView;
diff --git a/packages/core/src/specs/LottieAnimationViewNativeComponent.ts b/packages/core/src/specs/LottieAnimationViewNativeComponent.ts
index a62640c..613d831 100644
--- a/packages/core/src/specs/LottieAnimationViewNativeComponent.ts
+++ b/packages/core/src/specs/LottieAnimationViewNativeComponent.ts
@@ -29,12 +29,20 @@ type TextFilterAndroidStruct = Readonly<{
   replace: string;
 }>;
 
+type SourceDotLottie = Readonly<{
+  uri: string;
+  width: number;
+  height: number;
+  scale: number;
+}>;
+
 export interface NativeProps extends ViewProps {
   resizeMode?: string;
   renderMode?: string;
   sourceName?: string;
   sourceJson?: string;
   sourceURL?: string;
+  sourceDotLottie?: SourceDotLottie;
   imageAssetsFolder?: string;
   progress?: Float;
   speed?: Double;
